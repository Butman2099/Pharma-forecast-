import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import io
from datetime import datetime, timedelta
import calendar
import math

# Function to apply trend adjustment
def inverse_transform(prediction, trend):
    return prediction + trend

# Set page configuration
st.set_page_config(
    page_title="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤",
    page_icon="üìä",
    layout="wide",
)

# Application title and description
st.title("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤")
st.markdown("""
–¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–æ–∑–≤–æ–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è —ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ, 
—â–æ–± —Å–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó, –≤–∏–±—Ä–∞–≤—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑—É.
""")

# Sidebar for model upload and configuration
with st.sidebar:
    st.header("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
    uploaded_model = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å ML (.pkl –∞–±–æ .joblib)", type=["pkl", "joblib"])
    
    st.header("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö")
    uploaded_data = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (CSV)", type=["csv"])

# Initialize session state for model and data
if 'model' not in st.session_state:
    st.session_state.model = None
if 'data' not in st.session_state:
    st.session_state.data = None
if 'features' not in st.session_state:
    st.session_state.features = [
        "Remote communication", "E-mailing", "Press advertisement", 
        "Radio advertisement", "P_UAH_SHIFT_1"
    ]

# Load model when uploaded
if uploaded_model is not None:
    try:
        model_bytes = io.BytesIO(uploaded_model.read())
        st.session_state.model = joblib.load(model_bytes)
        st.sidebar.success("–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.sidebar.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –º–æ–¥–µ–ª—ñ: {e}")

# Load data if uploaded
if uploaded_data is not None:
    try:
        st.session_state.data = pd.read_csv(uploaded_data)
        st.sidebar.success("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        
        # Convert DATE column to datetime
        if 'DATE' in st.session_state.data.columns:
            st.session_state.data['DATE'] = pd.to_datetime(st.session_state.data['DATE'])
        
        # Extract features from data (excluding DATE and Time index)
        if st.session_state.data is not None:
            st.session_state.features = [col for col in st.session_state.data.columns 
                                      if col not in ['DATE', 'Time index']]
    except Exception as e:
        st.sidebar.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö: {e}")

# Display sample data and feature statistics if available
if st.session_state.data is not None:
    st.header("–í–∏–±—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö")
    st.dataframe(st.session_state.data.head())

# Main prediction section
st.header("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É")

# Date selection for forecast
if st.session_state.data is not None and 'DATE' in st.session_state.data.columns:
    # Get the range of dates available in the data
    min_date = st.session_state.data['DATE'].min()
    max_date = st.session_state.data['DATE'].max()
    
    # Function to add one month to a date
    def add_one_month(dt):
        month = dt.month
        year = dt.year
        if month == 12:
            month = 1
            year += 1
        else:
            month += 1
        
        # Handle edge cases with month lengths
        last_day = calendar.monthrange(year, month)[1]
        day = min(dt.day, last_day)
        
        return dt.replace(year=year, month=month, day=day)
    
    # Calculate next month after the last available date for max forecast date
    max_forecast_date = add_one_month(max_date)
    
    # Get min forecast date (should be one month after the first date in the dataset)
    min_forecast_date = add_one_month(min_date)
    
    # Date picker for forecast date
    forecast_date = st.date_input(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑—É:",
        value=min_forecast_date,
        min_value=min_forecast_date,
        max_value=max_forecast_date
    )
    
    # Convert to datetime for comparison
    forecast_date = pd.to_datetime(forecast_date)
    
    # Calculate the input date (1 month before forecast date)
    input_date = forecast_date - pd.DateOffset(months=1)
    input_date = pd.to_datetime(input_date).normalize()
    
    # Find the closest date in the dataset
    if st.session_state.data is not None:
        closest_date_mask = st.session_state.data['DATE'] == input_date
        
        if closest_date_mask.any():
            st.success(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑: {input_date.strftime('%Y-%m-%d')} –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤ –Ω–∞: {forecast_date.strftime('%Y-%m-%d')}")
            input_row = st.session_state.data[closest_date_mask].iloc[0]
            
            # Display the input data for the selected date
            input_features = {}
            
            # Option to use CSV values or enter custom values
            use_csv_values = st.radio(
                "–í—Ö—ñ–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:",
                ["–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∑ CSV", "–í–≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –ø–æ–ª—ñ–≤"],
                horizontal=True
            )
            
            cols = st.columns(2)
            
            for i, feature in enumerate(st.session_state.features):
                with cols[i % 2]:
                    # Determine appropriate decimal places based on the value
                    value = input_row[feature]
                    #if abs(value) < 1:
                        #decimal_places = 3
                    #elif abs(value) < 10:
                        #decimal_places = 2
                    #elif abs(value) < 100:
                        #decimal_places = 1
                    #else:
                        #decimal_places = 0
                    
                    # Create number input field (disabled if using CSV values)
                    input_features[feature] = st.number_input(
                        f"{feature}",
                        value=value,
                        #format=f"%.{decimal_places}f",
                        disabled=(use_csv_values == "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∑ CSV")
                    )
                    
                    # If using CSV values, always use the original value
                    if use_csv_values == "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∑ CSV":
                        input_features[feature] = value
            
            # Make prediction button
            if st.button("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É"):
                if st.session_state.model is not None:
                    try:
                        # Create input dataframe
                        input_df = pd.DataFrame([input_features])
                        
                        # Make prediction
                        prediction = st.session_state.model.predict(input_df)
                        
                        # Get Time index for trend calculation
                        time_index = None
                        if 'Time index' in input_row:
                            time_index = input_row['Time index']
                            
                            # Calculate trend adjustment
                            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —ñ–∑ –ø–æ–ø—Ä–∞–≤–∫–æ—é –Ω–∞ —Ç—Ä–µ–Ω–¥")
                            
                            # Applying logarithmic trend formula: y = 1307.0931 + 315.7310*log(x)
                            trend_value = 1307.0931 + 315.7310 * np.log(time_index)
                            
                            # For forecast month (time_index + 1)
                            forecast_time_index = time_index + 1
                            forecast_trend_value = 1307.0931 + 315.7310 * np.log(forecast_time_index)
                            
                            # Adjust prediction with trend using inverse_transform function
                            adjusted_prediction = inverse_transform(prediction[0], forecast_trend_value)
                            
                            # Display both predictions
                            col = st.columns(1)[0]
                          
                            with col:
                                st.metric(
                                    label=f"–ü—Ä–æ–≥–Ω–æ–∑ —ñ–∑ –ø–æ–ø—Ä–∞–≤–∫–æ—é –Ω–∞ —Ç—Ä–µ–Ω–¥",
                                    value=f"{adjusted_prediction:.4f}"
                                )
                            
                            # Show trend calculation details
                            with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É"):
                                st.write(f"–§–æ—Ä–º—É–ª–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É: y = 1307.0931 + 315.7310 * log(x)")
                                st.write(f"–ß–∞—Å–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –≤—Ö—ñ–¥–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è ({input_date.strftime('%Y-%m-%d')}): {time_index}")
                                for idx, column in enumerate(input_df.columns):
                                    value = input_df.iloc[0, idx]
                                    st.write(f"{column} = {value}")
                        else:
                            # Display prediction without trend adjustment
                            st.header("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
                            st.markdown(f"### –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ –¥–ª—è {forecast_date.strftime('%Y-%m-%d')}: **{prediction[0]:.4f}**")
                            st.warning("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–æ–ø—Ä–∞–≤–∫—É –Ω–∞ —Ç—Ä–µ–Ω–¥, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–∫–∞ ¬´Time index¬ª –≤—ñ–¥—Å—É—Ç–Ω—è —É –¥–∞–Ω–∏—Ö.")
                        
                        # Visualize the prediction
                        st.subheader("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏")
                        fig, ax = plt.subplots(figsize=(10, 5))
                        
                        # Create simple bar chart of input features
                        feature_names = list(input_features.keys())
                        feature_values = list(input_features.values())
                        
                        ax.bar(feature_names, feature_values)
                        ax.set_xticklabels(feature_names, rotation=45, ha='right')
                        ax.set_title(f"–í—Ö—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è {input_date.strftime('%Y-%m-%d')}")
                        ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
                        
                        st.pyplot(fig)
                        
                        # Additional feature importance if available
                        if hasattr(st.session_state.model, 'feature_importances_'):
                            st.subheader("Feature Importance")
                            importances = st.session_state.model.feature_importances_
                            
                            fig2, ax2 = plt.subplots(figsize=(10, 5))
                            sorted_idx = np.argsort(importances)
                            ax2.barh(np.array(feature_names)[sorted_idx], importances[sorted_idx])
                            ax2.set_title("Feature Importance")
                            
                            st.pyplot(fig2)
                            
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")
                else:
                    st.warning("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–µ–ª—å.")
        else:
            st.error(f"–î–∞–Ω—ñ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è {input_date.strftime('%Y-%m-%d')}. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø—Ä–æ–≥–Ω–æ–∑–Ω—É –¥–∞—Ç—É.")
else:
    st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ –¥–∞–Ω—ñ –∑ –∫–æ–ª–æ–Ω–∫–æ—é DATE –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É.")

# Display trend over time if data available
if st.session_state.data is not None and 'DATE' in st.session_state.data.columns:
    st.header("–Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
    
    # Plot time series for features with normalized values
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Create a copy of the dataframe for normalization
    plot_data = st.session_state.data.copy()
    
    for feature in st.session_state.features:
        if feature != 'DATE':
            # Min-max normalization to scale features between 0 and 1
            min_val = plot_data[feature].min()
            max_val = plot_data[feature].max()
            # Avoid division by zero
            if max_val > min_val:
                plot_data[f"{feature}_normalized"] = (plot_data[feature] - min_val) / (max_val - min_val)
            else:
                plot_data[f"{feature}_normalized"] = plot_data[feature] / max_val if max_val != 0 else plot_data[feature]
            
            # Plot normalized values
            ax.plot(plot_data['DATE'], plot_data[f"{feature}_normalized"], label=feature)
    
    ax.set_title("–î–∏–Ω–∞–º—ñ–∫–∞ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ —ñ–∑ –ø–ª–∏–Ω–æ–º —á–∞—Å—É (–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–∞—Å—à—Ç–∞–±)")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (0-1)")
    ax.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    st.pyplot(fig)

# About section
st.sidebar.header("About")
st.sidebar.info("""
–¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ –Ω–∞ –º—ñ—Å—è—Ü—å –≤–ø–µ—Ä–µ–¥.
–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–≤–æ—é –º–æ–¥–µ–ª—å —ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑—É —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –º–∏—Ç—Ç—î–≤–æ.
–ú–æ–¥–µ–ª—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü—å –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É + –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–Ω–∏–π –º—ñ—Å—è—Ü—å.
""")

# Current date information
current_date = datetime.now().strftime("%Y-%m-%d")
st.sidebar.markdown(f"**–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞:** {current_date}")